#!/usr/bin/env node
/*--------------------------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See https://go.microsoft.com/fwlink/?linkid=2090316 for license information.
 *-------------------------------------------------------------------------------------------------------------*/

const path = require('path');
const push = require('./src/push').push;
const patch = require('./src/patch');
const package = require('./src/package').package;
const prep = require('./src/prep');
const generateImageInformationFiles = require('./src/image-info').generateImageInformationFiles;
const configUtils = require('./src/utils/config');
const packageJson = require('../package.json');

console.log('vscode-dev-containers CLI\nCopyright (c) Microsoft Corporation. All rights reserved.\n')

require('yargs')
    .command('pack', 'package dev container definitions', (yargs) => {
        yargs
            .options({
                'release': {
                    describe: 'Repository release tag or branch',
                    default: `v${packageJson.version}`
                },
                'registry-repositories': {
                    describe: 'Map of registries and repositories',
                    default: configUtils.getConfig('registryRepositories')
                },
                'registry': {
                    describe: 'Container registry to push images to'
                },
                'repository': {
                    alias: 'registry-path',
                    describe: 'Repository in registry to push images'
                },
                'stub-registry': {
                    describe: 'Registry to add to stub',
                    default: configUtils.getConfig('stubRegistry', 'mcr.microsoft.com')
                },
                'stub-repository': {
                    alias: 'stub-registry-path',
                    describe: 'Repository in registry to stub',
                    default: configUtils.getConfig('stubRepository', 'vscode/devcontainers')
                },
                'github-repo': {
                    describe: 'vscode-dev-containers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/vscode-dev-containers')
                },
                'package-only': {
                    describe: 'Whether to prep/build/push before packaging',
                    type: 'boolean',
                    default: false
                },
                'prep-and-package-only': {
                    describe: 'Prep and package, but do not build/push',
                    type: 'boolean',
                    default: false
                },
                'update-latest': {
                    describe: 'Whether to tag latest and {MAJOR}',
                    type: 'boolean',
                    default: true
                },
                'clean': {
                    describe: 'Whether to clean up staging folder when done',
                    type: 'boolean',
                    default: true
                },
                'skip-push': {
                    describe: 'A space separated list of definition IDs to skip build and push.',
                    type: 'array',
                    default: []
                }
            })
    }, packCommand)
    .command('push [devcontainer]', 'push dev container images to a repository', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'ID of dev container to push',
                default: null
            })
            .options({
                'release': {
                    describe: 'Repository release tag or branch',
                    default: `v${packageJson.version}`
                },
                'registry-repositories': {
                    describe: 'Map of registries and repositories',
                    default: configUtils.getConfig('registryRepositories')
                },
                'registry': {
                    describe: 'Container registry to push images to'
                },
                'repository': {
                    alias: 'registry-path',
                    describe: 'Repository in registry to push images'
                },
                'stub-registry': {
                    describe: 'Registry to add to stub',
                    default: configUtils.getConfig('stubRegistry', 'mcr.microsoft.com')
                },
                'stub-repository': {
                    alias: 'stub-registry-path',
                    describe: 'Repository in registry to stub',
                    default: configUtils.getConfig('stubRepository', 'vscode/devcontainers')
                },
                'github-repo': {
                    describe: 'vscode-dev-containers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/vscode-dev-containers')
                },
                'update-latest': {
                    describe: 'Whether to tag latest and {MAJOR} if pushing',
                    type: 'boolean',
                    default: true
                },
                'prep-only': {
                    describe: 'Prep the containers for build/push, but do not actually do it',
                    type: 'boolean',
                    default: false
                },
                'push': {
                    describe: 'Whether to push after prep/build',
                    type: 'boolean',
                    default: true
                },
                'page': {
                    describe: 'Page number (of total) to push',
                    type: 'integer',
                    default: 1
                },
                'page-total': {
                    describe: 'Total number of pages to use when parallelizing builds',
                    type: 'integer',
                    default: 1
                },
                'replace-images': {
                    describe: 'Whether to replace released images. Does not apply to dev tag.',
                    type: 'boolean',
                    default: false
                },
                'skip': {
                    describe: 'A space separated list of definition IDs to skip building and pushing.',
                    type: 'array',
                    default: []
                }
            })
    }, pushCommand)
    .command('update-script-sources <release>', 'updates all script source URLs in Dockerfiles to a tag or branch', (yargs) => {
        yargs
            .positional('release', {
                describe: 'Release tag to branch use for script URLs',
            })
            .options({
                'github-repo': {
                    describe: 'vscode-dev-containers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/vscode-dev-containers')
                },
                'update-sha': {
                    describe: 'Update script SHAs to match file',
                    type: 'boolean',
                    default: true
                }
            })
    }, updateScriptSourcesCommand)
    .command('cg [devcontainer]', 'Extracts image information into files like cgmanifest.json', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'Limits info extraction to single definition',
                default: null
            })
            .options({
                'release': {
                    describe: 'Repository release tag or branch',
                    default: 'master'
                },
                'registry-repositories': {
                    describe: 'Map of registries and to repositories',
                    default: configUtils.getConfig('registryRepositories')
                },
                'registry': {
                    describe: 'Container registry to push images to'
                },
                'repository': {
                    alias: 'registry-path',
                    describe: 'Repository in registry to push images'
                },
                'stub-registry': {
                    describe: 'Registry to add to stub',
                    default: configUtils.getConfig('stubRegistry', 'mcr.microsoft.com')
                },
                'stub-repository': {
                    alias: 'stub-registry-path',
                    describe: 'Repository in registry to stub',
                    default: configUtils.getConfig('stubRepository', 'vscode/devcontainers')
                },
                'github-repo': {
                    describe: 'vscode-dev-containers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/vscode-dev-containers')
                },
                'build': {
                    describe: 'Whether to to builds image first',
                    type: 'boolean',
                    default: true
                },
                'prune': {
                    describe: 'Whether to prune images between definitions',
                    type: 'boolean',
                    default: false
                },
                'cg': {
                    describe: 'Whether to generate cgmanifest.json',
                    type: 'boolean',
                    default: true
                },
                'markdown': {
                    describe: 'Whether to generate history markdown files',
                    type: 'boolean',
                    default: false
                },
                'output-path': {
                    describe: 'Path to to store extracted info',
                    default: path.resolve(__dirname, '..', configUtils.getConfig('informationFileOutputPath', '.'))
                },
                'overwrite': {
                    describe: 'Whether to overwrite files',
                    type: 'boolean',
                    default: true
                }
            })
    }, imageInfoCommand)
    .command('info [devcontainer]', 'Extracts image information into files.', (yargs) => {
        yargs
            .positional('devcontainer', {
                describe: 'Limits info extraction to single definition',
                default: null
            })
            .options({
                'release': {
                    describe: 'Repository release tag or branch',
                    default: 'master'
                },
                'registry-repositories': {
                    describe: 'Map of registries and to repositories',
                    default: configUtils.getConfig('registryRepositories')
                },
                'registry': {
                    describe: 'Container registry to push images to'
                },
                'repository': {
                    alias: 'registry-path',
                    describe: 'Repository in registry to push images'
                },
                'stub-registry': {
                    describe: 'Registry to add to stub',
                    default: configUtils.getConfig('stubRegistry', 'mcr.microsoft.com')
                },
                'stub-repository': {
                    alias: 'stub-registry-path',
                    describe: 'Repository in registry to stub',
                    default: configUtils.getConfig('stubRepository', 'vscode/devcontainers')
                },
                'github-repo': {
                    describe: 'vscode-dev-containers repo name',
                    default: configUtils.getConfig('githubRepoName', 'microsoft/vscode-dev-containers')
                },
                'build': {
                    describe: 'Whether to builds images first',
                    type: 'boolean',
                    default: true
                },
                'cg': {
                    describe: 'Whether to generate cgmanifest.json',
                    type: 'boolean',
                    default: false
                },
                'markdown': {
                    describe: 'Whether to generate history markdown files',
                    type: 'boolean',
                    default: true
                },
                'prune': {
                    describe: 'Whether to prune images between definitions',
                    type: 'boolean',
                    default: false
                },
                'output-path': {
                    describe: 'Path to to store extracted info',
                    default: path.resolve(__dirname, '..', configUtils.getConfig('informationFileOutputPath', '.'))
                },
                'overwrite': {
                    describe: 'Whether to overwrite files',
                    type: 'boolean',
                    default: false
                }
            })
    }, imageInfoCommand)
    .command('patch', 'patch existing images', (yargs) => {
        yargs
            .options({
                'all': {
                    describe: 'run all patches not already complete',
                    type: 'boolean',
                    default: false
                },
                'patch-path': {
                    describe: 'path to the folder containing the patch files',
                    default: '.'
                },
                'registry-repositories': {
                    describe: 'Map of registries and to repositories',
                    default: configUtils.getConfig('registryRepositories')
                },
                'registry': {
                    describe: 'Container registry to push images to'
                },
                'repository': {
                    alias: 'registry-path',
                    describe: 'Repository in registry to push images to'
                }
            })
    }, patchCommand)
    .command('copy-library-scripts', 'copy files from script-library folder into appropriate definitions', () => {}, copyLibraryScriptsCommand)
    .demandCommand()
    .help()
    .argv;

function pushCommand(argv) {
    const registryRepositories = getRegistryRepositories(argv.registryRepositories, argv.registry, argv.repository)
    push(argv.githubRepo, argv.release, argv.updateLatest, registryRepositories, argv.stubRegistry,
        argv.stubRepository, argv.push, argv.prepOnly, argv.skip, argv.page, argv.pageTotal, argv.replaceImages, argv.devcontainer)
        .catch((reason) => {
            console.error(`(!) Push failed - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function packCommand(argv) {
    const registryRepositories = getRegistryRepositories(argv.registryRepositories, argv.registry, argv.repository)
    package(argv.githubRepo, argv.release, argv.updateLatest, registryRepositories,
        argv.stubRegistry, argv.stubRepository, argv.prepAndPackageOnly, argv.packageOnly, argv.clean, argv.skipPush)
        .catch((reason) => {
            console.error(`(!) Packaging failed - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function updateScriptSourcesCommand(argv) {
    prep.updateAllScriptSourcesInRepo(argv.githubRepo, argv.release, argv.updateSha)
        .catch((reason) => {
            console.error(`(!) Failed to update script sources - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function copyLibraryScriptsCommand() {
    prep.copyLibraryScriptsForAllDefinitions()
        .catch((reason) => {
            console.error(`(!) Failed to copy library scripts to definitions  - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function imageInfoCommand(argv) {
    const registryRepositories = getRegistryRepositories(argv.registryRepositories, argv.registry, argv.repository)
    generateImageInformationFiles(argv.githubRepo, argv.release, registryRepositories, argv.stubRegistry, argv.stubRepository, 
        argv.build, argv.prune, argv.cg, argv.markdown, argv.overwrite, argv.outputPath, argv.devcontainer)
        .catch((reason) => {
            console.error(`(!) Image information file generation failed - ${reason}`);
            if(reason.stack) {
                console.error(`    ${reason.stack}`);
            }
            process.exit(1);
        });
}

function patchCommand(argv) {
    const registryRepositories = getRegistryRepositories(argv.registryRepositories, argv.registry, argv.repository)
    if (argv.all) {
        patch.patchAll(registryRepositories)
            .catch((reason) => {
                console.error(`(!) Patching failed - ${reason}`);
                if(reason.stack) {
                    console.error(`    ${reason.stack}`);
                }    
                process.exit(1);
            });
    } else {
        patch.patch(registryRepositories)
            .catch((reason) => {
                console.error(`(!) Patching failed - ${reason}`);
                if(reason.stack) {
                    console.error(`    ${reason.stack}`);
                }    
                process.exit(1);
            });
    }
}

// Utility function to process --registry-repositories, --registry, and --repository flags
function getRegistryRepositories(registryRepositories, registry, repository) {
    if(registry && repository) {
        const result = {};
        result[registry] = repository;
        return result;
    } else if(registry) {
        const result = {};
        result[registry] = registryRepositories[registry];
        return result;
    } 
    return registryRepositories;
}